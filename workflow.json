{
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json[\"body\"][\"message\"]}}",
        "options": {
          "systemMessage": "=أنت وكيل (Agent) متخصص في المراسيم التنظيمية والقوانين اللبنانية.\nمصادرك الأساسية:\n١. الملفات الرسمية (المراسيم التنظيمية والقوانين) التي زوّدك بها المستخدم.\n٢. محرك البحث Tavily لاستخدامه عند الحاجة لمعلومات غير موجودة في المراسيم، مع أولوية البحث في المواقع الرسمية للحكومة اللبنانية (مثل: رئاسة مجلس الوزراء، الوزارات، الجريدة الرسمية).\n\n🔎 قواعد استخدام Tavily\n١. ابحث أولًا في المراسيم التنظيمية (PDFs) المزوّدة.\n٢. إذا لم تجد معلومة داخل النصوص، لا تذكر فجوة ولا تشرح أن النصوص ناقصة. ببساطة، أعطِ الجواب من نتائج Tavily.\n٣. عند استخدام Tavily:\n• أعطِ أولوية للمصادر الرسمية اللبنانية (gov.lb، presidency، parliament، ministry).\n• ثم عزّز بالمصادر الدولية الموثوقة (UNESCO، WHO، UN SDGs، تقارير رسمية).\n• اعرض الروابط الحقيقية كما هي (بدون Placeholders أو اختصار).\n• عند تعدد المصادر، اكتفِ بـ حتى ٣ مصادر عالية الموثوقية، وفضّل الرسمية اللبنانية أولًا.\n٤. اجمع دائمًا الجواب في شكل واحد متماسك دون ذكر كلمة Gap، واجعل “المصادر:” في آخر الجواب.\n\n🛠️ مجالات الاستخدام\n١- السياسة (Policy)\nأسئلة مثل: \"ما هي الوزارات المسؤولة عن الذكاء الاصطناعي في التعليم؟\"\nأجب استنادًا للقوانين (مثل: القانون ٢٨٥/٢٠١٠) وإذا لم يوجد ذكر AI → قدّم معلومات Tavily (UNESCO، استراتيجيات التعليم الرقمي).\n\n٢- التخطيط للعمل (Action Planning)\nأسئلة مثل: \"لإطلاق مشروع التحول الرقمي في الجامعات، أي جهات وزارية معنية؟\"\nاستعن بالنصوص الرسمية (وزارة التربية، وزارة الاتصالات، وزارة الإعلام) وأكمل بممارسات Tavily (البنك الدولي، OECD، إلخ).\n\n٣- الإصلاح (Reform)\nأسئلة مثل: \"هل وزارة الصحة مغطاة بالصحة الرقمية؟\"\nإذا القانون غير مذكور، أعطِ مباشرة توصيات WHO / UN حول الصحة الرقمية دون الإشارة إلى فجوة.\n\n✅ مثال عملي – وزارة الخارجية اللبنانية ٢٠٢٤\nالسؤال: هل وقّعت وزارة الخارجية اللبنانية أي اتفاقيات دولية في ٢٠٢٤؟\n\nالإجابة:\nفي عام ٢٠٢٤، أعلنت وزارة الخارجية اللبنانية عبر بيانات رسمية عن توقيع عدد من الاتفاقيات الدولية، أبرزها:\n• في ١٩ تشرين الثاني ٢٠٢٤، اتفاقية إعفاء من تأشيرات الدخول بين لبنان وسيشيل (Visa Waiver Agreement) وفق بيان رسمي لوزارة خارجية سيشيل.\n• في ٢٧ تشرين الثاني ٢٠٢٤، تم توقيع اتفاق وقف إطلاق نار بين لبنان وإسرائيل وخمس دول وسيطة برعاية الولايات المتحدة، وهو حدث بارز ذو طابع دولي.\n\nالمصادر:\n١) Seychelles and Lebanon sign Visa Waiver Agreement — موقع وزارة خارجية سيشيل (٢٠٢٤-١١)\nhttps://www.gov.sc\n\n٢) Israel–Lebanon ceasefire agreement — ويكيبيديا + تقارير دبلوماسية دولية (٢٠٢٤-١١)\nhttps://en.wikipedia.org\n\nالملخص العملي:\nوزارة الخارجية اللبنانية وقّعت في ٢٠٢٤ اتفاقيات منها:\n• اتفاقية إعفاء التأشيرات مع سيشيل.\n• اتفاق وقف إطلاق النار مع إسرائيل بدعم دولي.\n\n✅ التعليمات النهائية للـ Agent\n١. اعتمد دائمًا على المراسيم اللبنانية (اذكر رقم + تاريخ).\n٢. إذا لم توجد المعلومة في النصوص، أعطِ الجواب من Tavily مباشرة دون ذكر كلمة Gap.\n٣. اجعل Tavily يبحث أولًا في المصادر الرسمية الحكومية اللبنانية.\n٤. رتّب الإجابة: (جزء محلي من المراسيم إن وجد → جزء مستند للويب الرسمي → مصادر).\n٥. احرص أن يكون الجواب عمليًا ومنظمًا (وزارة/مرسوم → الصلاحيات/الأحداث → النتائج)، مع روابط حقيقية في قسم “المصادر:”."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -608,
        736
      ],
      "id": "8c28d0cf-85d4-46a0-a7ed-efe8aa330ae7",
      "name": "Internal Data Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -320,
        1168
      ],
      "id": "c1790532-4bc1-4cee-bcb6-36bd3badb0c6",
      "name": "Embeddings Model",
      "credentials": {
        "openAiApi": {
          "id": "iYEw9zMn81Q9wghq",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -656,
        960
      ],
      "id": "7baca161-7ea5-46c6-9606-2f03b4c651cd",
      "name": "4.1-mini",
      "credentials": {
        "openAiApi": {
          "id": "iYEw9zMn81Q9wghq",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/drive/v3/files?q='1MuPK-oruXJjLdaTO6BGiEHi7u9ILGNPj'+in+parents+and+mimeType='application/pdf'&fields=files(id,name)&pageSize=1000",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "options": {
          "response": {}
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3488,
        768
      ],
      "id": "09f3e30b-c7ab-487d-bb93-d0ae93c4c9d9",
      "name": "List PDFs (Google Drive API)",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "5U17CKSNIHcDV0OI",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3040,
        768
      ],
      "id": "23bc17f0-57ed-4254-85cb-f3f9bb38376e",
      "name": "Download PDF",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "5U17CKSNIHcDV0OI",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "files",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -3264,
        768
      ],
      "id": "d0d3b2be-b4f7-47af-a823-2f822b378a92",
      "name": "Split Out"
    },
    {
      "parameters": {
        "mode": "insert",
        "pineconeIndex": {
          "__rl": true,
          "value": "abuhmed",
          "mode": "list",
          "cachedResultName": "abuhmed"
        },
        "options": {
          "pineconeNamespace": "data"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.1,
      "position": [
        -2784,
        768
      ],
      "id": "bff03dd6-b6c0-43df-91cc-ba2abe31101a",
      "name": "Pinecone Vector Store",
      "credentials": {
        "pineconeApi": {
          "id": "pjHuV7KE3OF1qCui",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Use this for fetching internal data",
        "pineconeIndex": {
          "__rl": true,
          "value": "abuhmed",
          "mode": "list",
          "cachedResultName": "abuhmed"
        },
        "topK": 20,
        "options": {
          "pineconeNamespace": "data"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.3,
      "position": [
        -400,
        960
      ],
      "id": "2a5e7dd7-af32-4e47-b814-117b74dc4868",
      "name": "Pinecone Internal Data",
      "credentials": {
        "pineconeApi": {
          "id": "pjHuV7KE3OF1qCui",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "dataType": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        -2688,
        992
      ],
      "id": "25c7399e-75af-4400-8f4e-9a7090245047",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkSize": 400,
        "chunkOverlap": 80,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        -2608,
        1200
      ],
      "id": "e5bb8623-48f7-4e8e-a324-845a3f4d8fa9",
      "name": "Text Splitter"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2816,
        992
      ],
      "id": "042561c2-24ab-4afc-9b69-cf2f5c58a55a",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "iYEw9zMn81Q9wghq",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -880,
        944
      ],
      "id": "caa9fd2c-9fd5-4e25-8a90-2301e3b7ee9a",
      "name": "Webhook",
      "webhookId": "cda204fb-cea3-4cec-8fd3-8b3698aeadcc"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{$json[\"body\"][\"sessionId\"]}}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -528,
        960
      ],
      "id": "4e4d555f-f5e2-40e7-9c71-7b2872503b27",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -16,
        736
      ],
      "id": "8701c9bd-4aab-4bc1-a8ef-31dc3c7e3824",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool for searching online",
        "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query', ``, 'string') }}",
        "options": {}
      },
      "type": "@tavily/n8n-nodes-tavily.tavilyTool",
      "typeVersion": 1,
      "position": [
        -128,
        960
      ],
      "id": "b5952d69-8878-4431-a65b-f7313ba69bc6",
      "name": "Search in Tavily1",
      "credentials": {
        "tavilyApi": {
          "id": "E3XjfEpiZbOAqOc9",
          "name": "Tavily account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -2176,
        752
      ],
      "id": "e4ca2116-1d87-48c2-97c8-4329dc86a38d",
      "name": "Chat",
      "webhookId": "11fbc239-e1ad-4523-811e-f85c98b65c72"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1680,
        1184
      ],
      "id": "7740ba86-f60a-4c78-8f5b-efa512530071",
      "name": "Embeddings Model1",
      "credentials": {
        "openAiApi": {
          "id": "iYEw9zMn81Q9wghq",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Use this for fetching internal data",
        "pineconeIndex": {
          "__rl": true,
          "value": "abuhmed",
          "mode": "list",
          "cachedResultName": "abuhmed"
        },
        "topK": 20,
        "options": {
          "pineconeNamespace": "data"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.3,
      "position": [
        -1760,
        976
      ],
      "id": "07f36171-05ad-448a-a2b9-da7c5ce3898b",
      "name": "Pinecone Internal Data1",
      "credentials": {
        "pineconeApi": {
          "id": "pjHuV7KE3OF1qCui",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Chat').item.json.sessionId }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1888,
        976
      ],
      "id": "d1b17eaf-589f-40a6-a75b-0681d066645e",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool for searching online",
        "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query', ``, 'string') }}",
        "options": {}
      },
      "type": "@tavily/n8n-nodes-tavily.tavilyTool",
      "typeVersion": 1,
      "position": [
        -1472,
        976
      ],
      "id": "f71445a6-ef97-4c34-863b-1cb6c5a58c92",
      "name": "Search in Tavily",
      "credentials": {
        "tavilyApi": {
          "id": "E3XjfEpiZbOAqOc9",
          "name": "Tavily account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "77ae0dad-4b0f-4821-89b8-9d4f021cfc9a",
              "name": "output",
              "value": "=={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1264,
        752
      ],
      "id": "c3346fb2-835a-4c8b-a810-ece9e56f8495",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=أنت وكيل (Agent) متخصص في المراسيم التنظيمية والقوانين اللبنانية.\nمصادرك الأساسية:\n١. الملفات الرسمية (المراسيم التنظيمية والقوانين) التي زوّدك بها المستخدم.\n٢. محرك البحث Tavily لاستخدامه عند الحاجة لمعلومات غير موجودة في المراسيم، مع أولوية البحث في المواقع الرسمية للحكومة اللبنانية (مثل: رئاسة مجلس الوزراء، الوزارات، الجريدة الرسمية).\n\n🔎 قواعد استخدام Tavily\n١. ابحث أولًا في المراسيم التنظيمية (PDFs) المزوّدة.\n٢. إذا لم تجد معلومة داخل النصوص، لا تذكر فجوة ولا تشرح أن النصوص ناقصة. ببساطة، أعطِ الجواب من نتائج Tavily.\n٣. عند استخدام Tavily:\n• أعطِ أولوية للمصادر الرسمية اللبنانية (gov.lb، presidency، parliament، ministry).\n• ثم عزّز بالمصادر الدولية الموثوقة (UNESCO، WHO، UN SDGs، تقارير رسمية).\n• اعرض الروابط الحقيقية كما هي (بدون Placeholders أو اختصار).\n• عند تعدد المصادر، اكتفِ بـ حتى ٣ مصادر عالية الموثوقية، وفضّل الرسمية اللبنانية أولًا.\n٤. اجمع دائمًا الجواب في شكل واحد متماسك دون ذكر كلمة Gap، واجعل “المصادر:” في آخر الجواب.\n\n🛠️ مجالات الاستخدام\n١- السياسة (Policy)\nأسئلة مثل: \"ما هي الوزارات المسؤولة عن الذكاء الاصطناعي في التعليم؟\"\nأجب استنادًا للقوانين (مثل: القانون ٢٨٥/٢٠١٠) وإذا لم يوجد ذكر AI → قدّم معلومات Tavily (UNESCO، استراتيجيات التعليم الرقمي).\n\n٢- التخطيط للعمل (Action Planning)\nأسئلة مثل: \"لإطلاق مشروع التحول الرقمي في الجامعات، أي جهات وزارية معنية؟\"\nاستعن بالنصوص الرسمية (وزارة التربية، وزارة الاتصالات، وزارة الإعلام) وأكمل بممارسات Tavily (البنك الدولي، OECD، إلخ).\n\n٣- الإصلاح (Reform)\nأسئلة مثل: \"هل وزارة الصحة مغطاة بالصحة الرقمية؟\"\nإذا القانون غير مذكور، أعطِ مباشرة توصيات WHO / UN حول الصحة الرقمية دون الإشارة إلى فجوة.\n\n✅ مثال عملي – وزارة الخارجية اللبنانية ٢٠٢٤\nالسؤال: هل وقّعت وزارة الخارجية اللبنانية أي اتفاقيات دولية في ٢٠٢٤؟\n\nالإجابة:\nفي عام ٢٠٢٤، أعلنت وزارة الخارجية اللبنانية عبر بيانات رسمية عن توقيع عدد من الاتفاقيات الدولية، أبرزها:\n• في ١٩ تشرين الثاني ٢٠٢٤، اتفاقية إعفاء من تأشيرات الدخول بين لبنان وسيشيل (Visa Waiver Agreement) وفق بيان رسمي لوزارة خارجية سيشيل.\n• في ٢٧ تشرين الثاني ٢٠٢٤، تم توقيع اتفاق وقف إطلاق نار بين لبنان وإسرائيل وخمس دول وسيطة برعاية الولايات المتحدة، وهو حدث بارز ذو طابع دولي.\n\nالمصادر:\n١) Seychelles and Lebanon sign Visa Waiver Agreement — موقع وزارة خارجية سيشيل (٢٠٢٤-١١)\nhttps://www.gov.sc\n\n٢) Israel–Lebanon ceasefire agreement — ويكيبيديا + تقارير دبلوماسية دولية (٢٠٢٤-١١)\nhttps://en.wikipedia.org\n\nالملخص العملي:\nوزارة الخارجية اللبنانية وقّعت في ٢٠٢٤ اتفاقيات منها:\n• اتفاقية إعفاء التأشيرات مع سيشيل.\n• اتفاق وقف إطلاق النار مع إسرائيل بدعم دولي.\n\n✅ التعليمات النهائية للـ Agent\n١. اعتمد دائمًا على المراسيم اللبنانية (اذكر رقم + تاريخ).\n٢. إذا لم توجد المعلومة في النصوص، أعطِ الجواب من Tavily مباشرة دون ذكر كلمة Gap.\n٣. اجعل Tavily يبحث أولًا في المصادر الرسمية الحكومية اللبنانية.\n٤. رتّب الإجابة: (جزء محلي من المراسيم إن وجد → جزء مستند للويب الرسمي → مصادر).\n٥. احرص أن يكون الجواب عمليًا ومنظمًا (وزارة/مرسوم → الصلاحيات/الأحداث → النتائج)، مع روابط حقيقية في قسم “المصادر:”."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1760,
        752
      ],
      "id": "c217859d-8dc0-4413-b98c-19dbb903c8c3",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node (JavaScript)\n// Input: items with item.json.output (string)\n// Output: items with item.json.output formatted for Arabic RTL\n\nconst items = $input.all();\n\n// --- helpers ---\nconst ARABIC_COMMA = '\\u060C';\nconst ARABIC_SEMI  = '\\u061B';\nconst ARABIC_QMARK = '\\u061F';\nconst RLM = '\\u200F';   // Right-to-Left Mark\nconst LRM = '\\u200E';   // Left-to-Right Mark\nconst RLI = '\\u2067';   // Right-to-Left Isolate\nconst PDI = '\\u2069';   // Pop Directional Isolate\n\nconst digitMap = {\n  '0':'\\u0660','1':'\\u0661','2':'\\u0662','3':'\\u0663','4':'\\u0664',\n  '5':'\\u0665','6':'\\u0666','7':'\\u0667','8':'\\u0668','9':'\\u0669'\n};\n\nfunction toArabicIndicDigits(str) {\n  return str.replace(/[0-9]/g, d => digitMap[d]);\n}\n\nfunction saveUrls(text) {\n  const urls = [];\n  const placeholder = (i) => `__URL_PLACEHOLDER_${i}__`;\n  const urlRe = /(https?:\\/\\/[^\\s)\\]}<>]+)(?=$|\\s|[\\])}>])/g;\n  let i = 0;\n  text = text.replace(urlRe, (m) => {\n    urls.push(m);\n    return placeholder(i++);\n  });\n  return { text, urls, placeholder };\n}\n\n/* ====== NEW: smarter restore that pastes real links ====== */\n\n// Arabic digits → ASCII \"0-9\"\nconst arabicDigitToAscii = (s) =>\n  s.replace(/[\\u0660-\\u0669]/g, (d) => String('٠١٢٣٤٥٦٧٨٩'.indexOf(d)));\n\n// Decode alphabetic tokens: A->0, B->1 ... Z->25, AA->26 ...\nfunction alphaTokenToIndex(tok) {\n  let n = 0;\n  for (let i = 0; i < tok.length; i++) {\n    n = n * 26 + (tok.charCodeAt(i) - 65 + 1);\n  }\n  return n - 1;\n}\n\n/**\n * Restores URLs into text:\n * - Restores the formatter’s own placeholders: snap.placeholder(i)\n * - Replaces \"__URL_PLACEHOLDER_0__\" (and Arabic digits \"__..._١__\")\n * - Replaces \"__URL_PH_A__\" / \"__URL_PH_AB__\"\n * - Pulls URLs from:\n *    - snap.urls (auto-captured from text)\n *    - item.json.urls (array)\n *    - item.json.sources[].url / .link\n *    - item.json.web_sources[].url / .link\n */\nfunction restoreUrlsSmart(text, snap, item) {\n  // 1) Build a candidate list of URLs in priority order\n  const all = [];\n\n  // a) URLs auto-captured by saveUrls (from the text itself)\n  snap.urls.forEach(u => all.push(u));\n\n  // b) Flat array item.json.urls\n  if (Array.isArray(item?.json?.urls)) {\n    for (const u of item.json.urls) {\n      if (typeof u === 'string' && /^https?:\\/\\//.test(u)) all.push(u);\n    }\n  }\n\n  // c) Structured sources arrays\n  const buckets = [item?.json?.sources, item?.json?.web_sources];\n  for (const arr of buckets) {\n    if (Array.isArray(arr)) {\n      for (const s of arr) {\n        const u = s?.url || s?.link;\n        if (typeof u === 'string' && /^https?:\\/\\//.test(u)) all.push(u);\n      }\n    }\n  }\n\n  // 2) Replace the formatter’s own saved placeholders first\n  //    (snap.placeholder(i) == \"__URL_PLACEHOLDER_i__\" used internally)\n  for (let i = 0; i < snap.urls.length; i++) {\n    const needle = snap.placeholder(i); // \"__URL_PLACEHOLDER_i__\"\n    const safe = `${LRM}${snap.urls[i]}${LRM}`;\n    text = text.split(needle).join(safe);\n  }\n\n  // 3) Replace external numeric placeholders: \"__URL_PLACEHOLDER_0__\" or \"__..._١__\"\n  text = text.replace(/__URL_PLACEHOLDER_([0-9\\u0660-\\u0669]+)__/g, (m, num) => {\n    const idx = parseInt(arabicDigitToAscii(num), 10);\n    const u = all[idx];\n    return u ? `${LRM}${u}${LRM}` : m;\n  });\n\n  // 4) Replace alphabetic placeholders: \"__URL_PH_A__\", \"__URL_PH_AB__\", etc.\n  text = text.replace(/__URL_PH_([A-Z]+)__/g, (m, token) => {\n    const idx = alphaTokenToIndex(token);\n    const u = all[idx];\n    return u ? `${LRM}${u}${LRM}` : m;\n  });\n\n  // 5) Ensure each URL is on its own line\n  text = text.replace(/\\s+(https?:\\/\\/)/g, '\\n$1');\n\n  return text;\n}\n/* ====== END new restore ====== */\n\nfunction normalizePunctuation(s) {\n  return s\n    .replace(/,/g, ARABIC_COMMA)\n    .replace(/;/g, ARABIC_SEMI)\n    .replace(/\\?/g, ARABIC_QMARK);\n}\n\nfunction normalizeWhitespace(s) {\n  // Normalize line breaks and collapse blank lines\n  s = s.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n  s = s.replace(/[ \\t]+\\n/g, '\\n');      // trim trailing spaces\n  s = s.replace(/\\n{3,}/g, '\\n\\n');      // collapse >2 blank lines\n  s = s.replace(/[ \\t]{2,}/g, ' ');      // collapse multiple spaces\n  return s.trim();\n}\n\nfunction formatBulletLine(content) {\n  // Ensure each bullet is on its own line with proper RTL formatting and spacing\n  content = content.trim();\n  return `\\n${RLI}•${RLM} ${content}${PDI}`;\n}\n\nfunction formatNormalLine(content) {\n  // Wrap non-bullet Arabic lines in RTL isolate for correct punctuation\n  content = content.trim();\n  return content ? `${RLI}${content}${PDI}` : '';\n}\n\nfunction formatSectionHeader(content) {\n  // Format section headers with extra spacing\n  content = content.trim();\n  return content ? `\\n\\n${RLI}${content}${PDI}\\n` : '';\n}\n\nfunction convertListMarkers(line) {\n  // Convert common list markers to unified \"•\"\n  // e.g., \"-\", \"*\", \"–\", \"—\", \"·\", \"•\" -> \"•\"\n  const m = line.match(/^\\s*([-*–—·•])\\s+(.*)$/);\n  if (m) return { isBullet: true, body: m[2] };\n  // Also support ordered items like \"1) text\" or \"١) نص\"\n  const ordered = line.match(/^\\s*([0-9\\u0660-\\u0669]+)[\\.\\)]\\s+(.*)$/);\n  if (ordered) return { isBullet: true, body: ordered[2] };\n  return { isBullet: false, body: line };\n}\n\nfunction arabizeOrderedPrefix(line) {\n  // If the line starts with \"1) \" etc. inside \"المصادر:\" block, convert to Arabic-Indic\n  return line.replace(/^\\s*([0-9]+)\\)\\s/, (m, d) => `${toArabicIndicDigits(d)}) `);\n}\n\nfunction formatSourcesBlock(lines, startIdx) {\n  // Ensure Arabic-Indic numbering (١)، (٢)، (٣) and keep URL on its own next line.\n  for (let i = startIdx + 1; i < lines.length; i++) {\n    if (!lines[i].trim()) continue;\n    const l = lines[i];\n    // Numbered item\n    if (/^\\s*([0-9]+)\\)\\s+/.test(l) || /^\\s*([\\u0660-\\u0669]+)\\)\\s+/.test(l)) {\n      const numbered = arabizeOrderedPrefix(l);\n      lines[i] = formatNormalLine(numbered);\n      continue;\n    }\n    // URL line: keep LTR, but wrap with isolates for overall layout\n    if (/^https?:\\/\\//.test(l.trim())) {\n      lines[i] = `${RLI}${LRM}${l.trim()}${LRM}${PDI}`;\n      continue;\n    }\n    // A regular line in sources block (e.g., title line). Keep RTL isolate.\n    lines[i] = formatNormalLine(l);\n  }\n}\n\nconst formattedItems = items.map((item) => {\n  let text = String(item?.json?.output ?? '');\n\n  // 1) Normalize whitespace early\n  text = normalizeWhitespace(text);\n\n  // 2) Temporarily remove URLs so digits/punct changes don't affect them\n  const snap = saveUrls(text);\n  text = snap.text;\n\n  // 3) Punctuation -> Arabic variants\n  text = normalizePunctuation(text);\n\n  // 4) Arabic-Indic digits (skip URLs because we removed them)\n  text = toArabicIndicDigits(text);\n\n  // 5) Line-by-line formatting (bullets, isolates, sources)\n  let lines = text.split('\\n');\n  let formattedLines = [];\n\n  // Detect \"المصادر:\" block to treat numbering/URLs nicely\n  let sourcesIdx = lines.findIndex(l => l.trim().startsWith('المصادر:'));\n\n  // Process each line and ensure proper line breaks and spacing\n  lines.forEach((line, idx) => {\n    const raw = line.trim();\n\n    if (!raw) {\n      // Empty line - add as is\n      formattedLines.push('');\n      return;\n    }\n\n    // Keep the exact \"المصادر:\" label as RTL\n    if (raw === 'المصادر:') {\n      formattedLines.push(`\\n\\n${RLI}المصادر:${PDI}\\n`);\n      return;\n    }\n\n    // Check if this is a section header (like \"المهام:\" or \"الهيكلية:\")\n    if (raw.endsWith(':') && !raw.includes('•') && raw.length < 20) {\n      formattedLines.push(formatSectionHeader(raw));\n      return;\n    }\n\n    // Convert list markers to unified bullet\n    const { isBullet, body } = convertListMarkers(line);\n\n    if (isBullet) {\n      formattedLines.push(formatBulletLine(body));\n    } else {\n      // Regular paragraph/line - keep definition text as is\n      formattedLines.push(formatNormalLine(raw));\n    }\n  });\n\n  // If there is a sources block, tidy its subsequent lines\n  if (sourcesIdx !== -1) {\n    formatSourcesBlock(formattedLines, sourcesIdx);\n  }\n\n  text = formattedLines.join('\\n');\n\n  // 6) Restore URLs with real links (NEW)\n  text = restoreUrlsSmart(text, snap, item);\n\n  // 7) Final cleanup: remove redundant isolates and ensure proper spacing\n  text = text.replace(new RegExp(`${RLI}${PDI}`, 'g'), '');\n  \n  // Ensure proper spacing between sections and bullet points\n  text = text.replace(/(\\n)(\\u2067[^•])/g, '$1\\n$2'); // Add space before new sections\n  text = text.replace(/(•[^\\n]+\\u2069)(\\u2067[^•])/g, '$1\\n\\n$2'); // Add space after bullet lists\n  \n  // Clean up multiple blank lines but maintain good spacing\n  text = text.replace(/\\n{4,}/g, '\\n\\n\\n');\n\n  return { json: { output: text.trim() }, pairedItem: item.pairedItem };\n});\n\nreturn formattedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1440,
        752
      ],
      "id": "6844465e-b003-482a-9de1-deb5f2e96fd2",
      "name": "function formatter.js"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2016,
        976
      ],
      "id": "005992a8-1afa-4a90-b88d-c3b532b13ba4",
      "name": "4.1",
      "credentials": {
        "openAiApi": {
          "id": "iYEw9zMn81Q9wghq",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Ingestion",
        "height": 784,
        "width": 1280,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3584,
        624
      ],
      "typeVersion": 1,
      "id": "dc1d950f-1135-453d-afc1-0903e321d929",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Chatting tester",
        "height": 784,
        "width": 1280,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2272,
        624
      ],
      "typeVersion": 1,
      "id": "e581328c-8ecc-4e85-acbd-96a408411217",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# Webhook workflow",
        "height": 784,
        "width": 1280,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -960,
        624
      ],
      "typeVersion": 1,
      "id": "7519c0a4-5889-440a-a656-d6dad181e90c",
      "name": "Sticky Note2"
    }
  ],
  "connections": {
    "Internal Data Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Model": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Internal Data",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "4.1-mini": {
      "ai_languageModel": [
        [
          {
            "node": "Internal Data Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "List PDFs (Google Drive API)": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download PDF": {
      "main": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Download PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Internal Data": {
      "ai_tool": [
        [
          {
            "node": "Internal Data Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Internal Data Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Internal Data Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Search in Tavily1": {
      "ai_tool": [
        [
          {
            "node": "Internal Data Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Chat": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Model1": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Internal Data1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Internal Data1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Search in Tavily": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "function formatter.js",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "function formatter.js": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4.1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9790440382b26b8756faed847318b823fd323b3ec2df725521a3ba865176a9a7"
  }
}
